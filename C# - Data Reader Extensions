using AddAppAPI.Helpers;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Reflection;

namespace AddAppAPI.Extensions
{
    public static class DataReaderExtensions
    {
        public static T ToObject<T>(this SqlDataReader reader) where T : class, new()
        {
            var matchedProperties = GetMatchedProperties<T>(reader);
            if (reader.Read())
            {
                T t = new T();
                foreach (var kv in matchedProperties)
                {
                    if (!reader.IsDBNull(kv.Key))
                    {
                        var tuple = kv.Value;
                        tuple.Item1.SetValue(t, Convert.ChangeType(reader.GetValue(kv.Key), tuple.Item2), null);
                    }
                }

                return t;
            }

            return null;
        }

        public static List<T> ToList<T>(this SqlDataReader reader) where T : class, new()
        {
            var matchedProperties = GetMatchedProperties<T>(reader);
            var list = new List<T>();
            while (reader.Read())
            {
                var t = new T();
                foreach (var kv in matchedProperties)
                {
                    if (!reader.IsDBNull(kv.Key))
                    {
                        var tuple = kv.Value;
                        tuple.Item1.SetValue(t, Convert.ChangeType(reader.GetValue(kv.Key), tuple.Item2), null);
                    }
                }
                list.Add(t);
            }

            return list;
        }

        private static Dictionary<int, Tuple<PropertyInfo, Type>> GetMatchedProperties<T>(SqlDataReader reader)
        {
            Type type = typeof(T);
            var properties = type.GetProperties();
            Dictionary<int, Tuple<PropertyInfo, Type>> matchedProperties = new Dictionary<int, Tuple<PropertyInfo, Type>>(properties.Count());
            for (int i = 0; i < reader.FieldCount; i++)
            {
                var property = properties.FirstOrDefault(m => m.Name.Equals(reader.GetName(i), StringComparison.OrdinalIgnoreCase));
                if (property != null)
                {
                    //CommonFunctions.GetType is used to get type from Nullable type. ex: Nullable<int>
                    matchedProperties.Add(i, Tuple.Create(property, CommonFunctions.GetType(property.PropertyType)));
                }
            }

            return matchedProperties;
        }
    }
}
