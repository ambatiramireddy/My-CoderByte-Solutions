/*
         *  Jump search also works for ordered lists. It selects a block and tries to find the element
         *  in that block. If the element is not found, then it goes o the next block. The block size is 
         *  square root of the array size (âˆšarrayLength). After finding a correct
         *  block, it finds the element using a linear search technique. The jump search lies between linear search
         *   and binary search according to its performance.
         */
        public static int JumpSearch(int[] a, int x)
        {
            int blocksize = (int)Math.Sqrt(a.Length);
            int start = 0, end = blocksize;
            while (end < a.Length && a[end] <= x)
            {
                start = end;
                end = end + blocksize;
                if (end > a.Length - 1)
                {
                    //set end to array length to break the loop
                    end = a.Length; 
                }
            }

            for (int i = start; i < end; i++)
            {
                if (a[i] == x)
                {
                    return i;
                }
            }

            return -1;
        }
